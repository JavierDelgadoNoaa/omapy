##
# This specification is for the netCDF files generated using nr_input_generator
# as an intermediate step before generating the nps_int files. All variables
# (except maybe PRESSURE) are assumed to be taken directly from the 
# G5NR, but their names changed to match what NPS expects in the default
# METGRID.TBL
##

[BASIC]
# File naming convention. Keywords used for format() are acceptable
# The datetime keywords are: 'cal_date' for calendar date corresponding
# to the forecast time (i.e. init_date + forecast offset), 
# Other keywords: 
# 	'fhr' = forecast hour 
#	'fmin' = forecast minute
#   dom = domain number
file_format = netcdf4
parent_inspec = geos5/geos5.conf

[DEFAULT]
__prefix_inst = c1440_NR.inst30mn
__suffix = {cal_date:%Y%m%d_%H%M}z.nc4
__g5nr_inst30mn_2d_met1_nx = pathjoin(inst30mn_2d_met1_Nx, %(__prefix_inst)s_2d_met1_Nx.%(__suffix)s)

[field2filename_mappings]
##
# TODO ? SHOULD we have separate file2file for different level types?
#  -> This would complicate getting field2file from the [BASIC] file_name
##
# Map fields to the data files (i.e. "collections") they can be found in.
# The path given must be relative to the "topdir" passed in to InputSpecificNioFile
# For collections containing multiple fields, you can specify multiple
# in one line as follows:
#    FLD_FOO, FLD_BAR = c1440.inst3hr_2d_met1{cal_date:%Y%m%d_%H%M}z.nc4
# You may specify a relative path like so:
#    FLD = pathjoin(c1440.inst3hr_2d_met1, c1440.inst3hr_2d_met1{cal_date:%Y%m%d_%H%M}z.nc4)
# Mappings should be to the native field names, not the standard_names
# NOTE: There is no support for input sources that contain different levels in 
# different files (e.g. GFS gribA, gribB). Only input sources with different fields
# in different files are supported
##
# Note: items starting with '__' are ignored by the module that creates the standard->native mapping
#__prefix = c1440_NR.inst30mn
#__suffix = {cal_date:%Y%m%d_%H%M}z.nc4
#QV = pathjoin(inst30mn_3d_QV_Nv, %(prefix)s_3d_QV_Nv.{cal_date:%Y%m%d_%H%M}z.nc4)
## g5nr raw
#QV = pathjoin(inst30mn_3d_QV_Nv, %(__prefix)s_3d_QV_Nv.%(__suffix)s)
#HLML,PS,PRECTOT = pathjoin(inst30mn_2d_met1_Nx, %(__prefix)s_2d_met1_Nx.%(__suffix)s)
# TODO : These should be in sfcDelta_field_mappings. Gotta use special syntax to convert to 3d
#U10M,U2M, V10M, V2M = pathjoin(inst30mn_2d_met1_Nx, %(__prefix)s_2d_met1_Nx.%(__suffix)s)
#U250, U500, U850, V250, V500, V850, T250, T500, T850 = %(__g5nr_inst30mn_2d_met1_nx)s
PRECTOT, SLP = pathjoin(inst30mn_2d_met1_Nx, %(__prefix_inst)s_2d_met1_Nx.%(__suffix)s)
#c1440_NR.inst30mn_2d_met1_Nx.20061012_1900z.nc4

[arbitrary_field_mappings]

[2d_field_mappings]
mslp = SLP
precipitation_flux = PRECTOT

[isobaric_field_mappings]
# Note the special syntax here for reading in fields that are made up of 
# multiple (2d or 3d w/ time) netCDF Variables. For each variable, we 
# specify it's name, level value, and level units, separated by '.'
# The native variables must have mappings in [field2filename_mappings]
air_temperature = multivar[ T250.250.hPa, T500.500.hPa, T850.850.hPa ]
specific_humidity = multivar[ Q250.250.hPa, Q500.500.hPa, Q850.850.hPa ]
geopotential_height = multivar[ H250.250.hPa, H500.500.hPa, H850.850.hPa ]
eastward_wind = multivar[ U250.250.hPa, U500.500.hPa, U850.850.hPa ]
x_wind = %(eastward_wind)s
northward_wind = multivar[ V250.250.hPa, V500.500.hPa, V850.850.hPa ]
y_wind = %(northward_wind)s
upward_wind = multivar[ W200.200.hPa, W500.500.hPa, W850.850.hPa ]
vorticity = VORT850.850.hPa

[sfcDelta_field_mappings]

[mslDelta_field_mappings]

[soilDelta_field_mappings]
__lev_type = Depth below land surface (m)
__lev_indicator = 112

[field2filename_mappings]
# Set mappings for multivar fields (NOTE: I think I only need the mappings for the 2d fields)
#std(isobaric.geopotential_height), std(isobaric.eastward_wind), std(isobaric.u_wind) = inst30mn_2d_met1_Nx/c1440_NR.inst30mn_2d_met1_Nx.{fdate:%Y%m%d_%H%M}z.nc4
#std(isobaric.air_temperature), std(isobaric.northward_wind), std(isobaric.v_wind) = inst30mn_2d_met1_Nx/c1440_NR.inst30mn_2d_met1_Nx.{fdate:%Y%m%d_%H%M}z.nc4
#std(isobaric.upward_wind), std(isobaric.vorticity) = inst30mn_2d_met1_Nx/c1440_NR.inst30mn_2d_met1_Nx.{fdate:%Y%m%d_%H%M}z.nc4
T250, T500, T850, U250, U500, U850, V250, V500, V850, H250, H500, H850, W200, W500, W850, Q250, Q500, Q850  = inst30mn_2d_met1_Nx/c1440_NR.inst30mn_2d_met1_Nx.{fdate:%Y%m%d_%H%M}z.nc4


#[units]
#TT = K
#mslp = Pa
#PSFC = Pa
#qc = kg/kg
#PRESSURE = Pa
#u3d = m/s
#v3d = m/s
#ght = m
#total_precipitation = m

[field2lev_mappings]
# Maps fields to their corresponding dimension names and variables.
# In some cases, there is no variable associated with the 
# dimension (e.g. HWRF atmospheric value which are specified
# at midlayer, but only the interface pressure is available). In this case,
# just put a '-'

## g5nr_nps
#TT,QQ,HGT,QC,RH = lev,PRESSURE
## g5nr
#T, Q, H, QC, RH = lev, PL

[latlon2field_mappings]
# Specify mappings from horizontal coordinate to field name
# This is only needed if the dimension name is not identical
# to the variable name. (e.g. if a field has dimensions 
# 'lat' and 'lon' and the corresponding variables containing 
# the dimension data are named 'lat' and 'lon', it is not
# necessary to specify a meapping here.
# 
# The mappings here are from the dimension variable's name to the 
# field name. The dimension's dimension name is a property of 
# the field itself, so it does not need to be specified.
# The mapping from dimension variable to dimension is specified in 
# [var2dim_mappings]
#
# One default option is allowed using '*'.
# e.g. if the output is on a staggered grid where the U and V variables
# are on a grid whose coordinates are specified with ULAT, ULON and 
# the rest are on a grid whose coordinates are specified with HLAT,
# HLON, you would have:
# HLAT,HLON = *
# VLAT,VLON = U,V
#
# The dimension name (i.e. RHS) must always be a comma-separated list with
# the name of the latitude variable followed by the name of longitude variable
#
# NOTE: The code assumes that the lat,lon variables' values are at the same
# stagger location as the fields they are mapped to here
lat,lon = *

[field2stagger_mappings]
# Map fields to where they are defined on the grid. The value given should
# be a string corresponding to one of the constants in ESMF.api.constants.StaggerLoc
# (see also: http://www.earthsystemmodeling.org/esmf_releases/non_public/ESMF_7_0_0/esmpy_doc/html/StaggerLoc.html)
##
# For Variables that have a "level_type" or "level_indicator" attribute, the _getstaggerloc() method
# of SpecData will make assumptions on what the values currently are for GriB.
# This assumption will be based on current parameter tables, so if the GriB meisters decide to 
# change things in the future, bad things may happen
## g5nr - Vertically, all collections that end with "v" are defined at mid-layer
#         (e.g. inst30mn_3d_DELP_Nv). AFAICT, all hires 3d fields are. See pg. 7 of filespec
#         Horizontally, according to the filespec, variables are indexed according to their
#         lat/lon location (see pg. 5 of g5nr filespec)
#         Therefore, collectionis ending in "v" are CORNER_VCENTER and collections
#         ending in "e" are CORNER_VFACE
#         For 2D fields, they are all "CORNER"
T,U,V = CORNER_VCENTER
PRECTOT,SLP,TS,lat,lon = CORNER 
# These are 2-d Variables representing individual levels of 3-d fields, 
# presumably at the given pressure (i.e. at the interface) but we may want
# to verify 
T250, T500, T850, U250, U500, U850, V250, V500, V850, H250, H500, H850, W200, W500, W850, Q250, Q500, Q850 = CORNER_VFACE
# TODO ? : have a wildcard option. e.g. for g5nr we know all 2d are CORNER and all 3d are CORNER_VCENTER
## wrf/nmb
#HLAT,HLON = ? ; CENTER_VCENTER ?
#VLAT,VLON = ? ; EDGE2_VCENTER ?
#T,Q,RH = ? ; CENTER_VCENTER  
#U,V = ? ; EDGE2_VCENTER 

[horizontal_configuration]
# Name given to the latitude dimension
latitude_dim_name = lat
# Name given to the longitude dimension
longitude_dim_name = lon

[vertical_level_types]

[vertical_configuration]
level_lookup_setting = 8 ; interpolate
# Name given to the vertical dimension
pressure_lev_dim_name = lev

#[vertical_level_mappings]
# Map fields to the variables containing the level data
#TODO

[var2dim_mappings]
# Map dimension variables to the dimensions they correspond to.
# This is not needed if the dimension variable name is the same
# as the dimension name.
# The mapping from dimension variable to field is specified in 
# [horizontal_coordinate_mappings]
# We assume that there can be multiple mappings from dimension
# to dimension variable but only one mapping from dimension variable
# to dimension, so we map the variable to the dimension here.
# Horizontal coordinates _must_ be specified:
#    lat_var_name,lon_var_name = lat_dim_name,lon_dim_name
# Vertical coordinates _must_ be specified:
#    vertical_var_name = vertical_dim_name
# Specifying this is optional for Variables for which the dimension and
# the Variable corresponding to it have the same name.
#  e.g.: lat,lon = lat,lon
PL = lev

