##
# This specification is for the netCDF files generated using nr_input_generator
# as an intermediate step before generating the nps_int files. All variables
# (except maybe PRESSURE) are assumed to be taken directly from the 
# G5NR, but their names changed to match what NPS expects in the default
# METGRID.TBL
##

[BASIC]
# File naming convention. Keywords used for format() are acceptable
# The datetime keywords are: 'cal_date' for calendar date corresponding
# to the forecast time (i.e. init_date + forecast offset), 
# Other keywords: 
# 	'fhr' = forecast hour 
#	'fmin' = forecast minute
#   dom = domain number
file_name = g5nr_combined_hires.{cal_date:%Y}{cal_date:%m}{cal_date:%d}_{cal_date:%H}{cal_date:%M}z.nc4
file_format = netcdf

[DEFAULT]
__prefix = c1440_NR.inst30m
__suffix = {cal_date:%Y%m%d_%H%M}z.nc4
__g5nr_inst30mn_2d_met1_nx = pathjoin(inst30mn_2d_met1_Nx, %(__prefix)s_2d_met1_Nx.%(__suffix)s)

[field2filename_mappings]
##
# TODO ? SHOULD we have separate file2file for different level types?
#  -> This would complicate getting field2file from the [BASIC] file_name
##
# Map fields to the data files (i.e. "collections") they can be found in.
# The path given must be relative to the "topdir" passed in to InputSpecificNioFile
# For collections containing multiple fields, you can specify multiple
# in one line as follows:
#    FLD_FOO, FLD_BAR = c1440.inst3hr_2d_met1{cal_date:%Y%m%d_%H%M}z.nc4
# You may specify a relative path like so:
#    FLD = pathjoin(c1440.inst3hr_2d_met1, c1440.inst3hr_2d_met1{cal_date:%Y%m%d_%H%M}z.nc4)
# Mappings should be to the native field names, not the standard_names
##
# Note: items starting with '__' are ignored by the module that creates the standard->native mapping
#__prefix = c1440_NR.inst30mn
#__suffix = {cal_date:%Y%m%d_%H%M}z.nc4
#QV = pathjoin(inst30mn_3d_QV_Nv, %(prefix)s_3d_QV_Nv.{cal_date:%Y%m%d_%H%M}z.nc4)
## g5nr raw
#QV = pathjoin(inst30mn_3d_QV_Nv, %(__prefix)s_3d_QV_Nv.%(__suffix)s)
#HLML,PS,PRECTOT = pathjoin(inst30mn_2d_met1_Nx, %(__prefix)s_2d_met1_Nx.%(__suffix)s)
# TODO : These should be in sfcDelta_field_mappings. Gotta use special syntax to convert to 3d
#U10M,U2M, V10M, V2M = pathjoin(inst30mn_2d_met1_Nx, %(__prefix)s_2d_met1_Nx.%(__suffix)s)
#U250, U500, U850, V250, V500, V850, T250, T500, T850 = %(__g5nr_inst30mn_2d_met1_nx)s

[arbitrary_field_mappings]

[2d_field_mappings]
mslp = PMSL

[isobaric_field_mappings]
__lev_type = Isobaric surface (Pa) # Grib 2
__lev_indicator = 100 # Grib 1
# Grib
air_temperature = attr(long_name=Temperature&&level_type=%(__lev_type)s || long_name=Temperature&&level_indicator=%(__lev_indicator)s)
# nc
air_temperature = TT
## g5nr
# TODO : Use special syntax to convert these to 3d:
u_wind = U250, U500, U850
# V250, V500, V850, 
# T250, T500, T850 

[sfcDelta_field_mappings]

[mslDelta_field_mappings]

[soilDelta_field_mappings]
__lev_type = Depth below land surface (m)
__lev_indicator = 112

[field_mappings_brainstorming]
# Brainstorming what can be done to deal with grib discrepency 
# (i.e. naming convention changes, even fore the same forecast)
mslp = PMSL
temperature = TT
#    name        grib1 params to look for       grib2 params to look for    # capitalization also varies, to just use l/c
u3d = UU||UU_10; long_name=u-component of wind,level_indicator=105,level=10 ; long_name=u-component of wind,level_type=specified height level above ground
v3d = VV
ght = HGT
specific_humidity = SPECHUMD ; NOTE: QV in native collection
qc = QC
rh = RH
pmid = PRESSURE
sea_surface_skin_temperature = SKINTEMP
#total_precipitation = ACPREC_TOT ;<That's for nmmb!

[field_mappings]
mslp = PMSL
temperature = TT
u3d = UU
v3d = VV
ght = HGT
specific_humidity = SPECHUMD ; NOTE: QV in native collection
qc = QC
rh = RH
pmid = PRESSURE
sea_surface_skin_temperature = SKINTEMP
#total_precipitation = ACPREC_TOT ;<That's for nmmb!

[units]
TT = K
mslp = Pa
PSFC = Pa
qc = kg/kg
PRESSURE = Pa
u3d = m/s
v3d = m/s
ght = m
#total_precipitation = m

[field2lev_mappings]
# Maps fields to their corresponding dimension names and variables.
# In some cases, there is no variable associated with the 
# dimension (e.g. HWRF atmospheric value which are specified
# at midlayer, but only the interface pressure is available). In this case,
# just put a '-'

## g5nr_nps
TT,QQ,HGT,QC,RH = lev,PRESSURE
## g5nr
#T, Q, H, QC, RH = lev, PL

[latlon2field_mappings]
# Specify mappings from horizontal coordinate to field name
# This is only needed if the dimension name is not identical
# to the variable name. (e.g. if a field has dimensions 
# 'lat' and 'lon' and the corresponding variables containing 
# the dimension data are named 'lat' and 'lon', it is not
# necessary to specify a meapping here.
# 
# The mappings here are from the dimension variable's name to the 
# field name. The dimension's dimension name is a property of 
# the field itself, so it does not need to be specified.
# The mapping from dimension variable to dimension is specified in 
# [var2dim_mappings]
#
# One default option is allowed using '*'.
# e.g. if the output is on a staggered grid where the U and V variables
# are on a grid whose coordinates are specified with ULAT, ULON and 
# the rest are on a grid whose coordinates are specified with HLAT,
# HLON, you would have:
# HLAT,HLON = *
# VLAT,VLON = U,V
#
# The dimension name (i.e. RHS) must always be a comma-separated list with
# the name of the latitude variable followed by the name of longitude variable
#
# NOTE: The code assumes that the lat,lon variables' values are at the same
# stagger location as the fields they are mapped to here
lat,lon = *

[field2stagger_mappings]
# Map fields to where they are defined on the grid. The value given should
# be a string corresponding to one of the constants in ESMF.api.constants.StaggerLoc
# (see also: http://www.earthsystemmodeling.org/esmf_releases/non_public/ESMF_7_0_0/esmpy_doc/html/StaggerLoc.html)
##
# For Variables that have a "level_type" or "level_indicator" attribute, the _getstaggerloc() method
# of SpecData will make assumptions on what the values currently are for GriB.
# This assumption will be based on current parameter tables, so if the GriB meisters decide to 
# change things in the future, bad things may happen
## g5nr - Vertically, all collections that end with "v" are defined at mid-layer
#         (e.g. inst30mn_3d_DELP_Nv). AFAICT, all hires 3d fields are. See pg. 7 of filespec
#         Horizontally, according to the filespec, variables are indexed according to their
#         lat/lon location (see pg. 5 of g5nr filespec)
#         Therefore, collectionis ending in "v" are CORNER_VCENTER and collections
#         ending in "e" are CORNER_VFACE
#         For 2D fields, they are all "CORNER"
TT,T,U,V = CORNER_VCENTER
PMSL,TS,lat,lon = CORNER 
# TODO : how to defined 2d-cum-3d fields (e.g. u2,u10,u30)?
# TODO ? : have a wildcard option. e.g. for g5nr we know all 2d are CORNER and all 3d are CORNER_VCENTER
## wrf/nmb
#HLAT,HLON = ? ; CENTER_VCENTER ?
#VLAT,VLON = ? ; EDGE2_VCENTER ?
#T,Q,RH = ? ; CENTER_VCENTER  
#U,V = ? ; EDGE2_VCENTER 

[horizontal_configuration]
# Name given to the latitude dimension
latitude_dim_name = lat
# Name given to the longitude dimension
longitude_dim_name = lon

[vertical_level_types]
# key should be the dimension name
# Is this being use?
ISBL_0 = levType=isobaric; varName=lv_ISBL_0; isobaric_levels_Pa=200, 400, ...
lv_HGTL9 = levType=sfcDelta; varName=lv_HTGL9; values_m=10, 30

[vertical_configuration]
level_lookup_setting = 8 ; interpolate
#level_lookup_setting = 1 ; use nearest isobaric level
# Variable containing pressure level values
pressure_variable = PRESSURE ; Note that this is only in my derived data
# Name given to the vertical dimension
pressure_lev_dim_name = lev
# Number of isobaric vertical levels
num_levels = 72
#  Variables contianing U and V winds at a given height
surface_wind_variables = V10M, U10M
#
# Specify the isobaric levels
# You may use "------" for non-isobaric levels. It will be replaced by IGNORE_VALUE (i.e. -9999)
#                     0,     1,     2,     3,     4,     5,     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,     21,    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,    48,     49,    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,    71
pressure_levels =  1.50,  2.635, 4.014, 5.679, 7.767, 10.45, 13.96, 18.54, 24.49, 32.18, 42.04, 54.63, 70.60, 90.73, 116.0, 147.6, 186.8, 235.3, 294.8, 367.7, 456.2, 563.2, 691.8, 845.6,  1028,  1246,  1505,  1812,  2176,  2605,  3109,  3699,  4391,  5202,  6150,  7256,  8544, 10051, 11825,------,------,------,------,------,------,------,------,------,------,------,------,------,------,------,------,------,------,------,------,------,------,------,------,------,------,------,------,------,------,------,------,------
# These are the model interface/edge pressures (i.e. sum(DELP)+PS) - but none of the variables are defined there
#pressure_levels =  1.00,  2.27,   3.76,  5.60,  7.93, 10.97, 14.95, 20.13, 26.85, 35.50, 46.58, 60.68, 78.51, 100.9, 129.1, 164.1, 207.5, 261.0, 326.6, 406.7, 503.7, 620.7, 761.0, 928.3,  1127,  1363,  1645,  1978,  2372,  2836,  3380,  4017,  4763,  5638,  6659,  7850,  9236,------,------,------,------,------,------,------,------,------,------,------,------,------,------,------,------,------,------,------,------,------,------,------,------,------,------,------,------,------,------,------,------,------,------,------

#[vertical_level_mappings]
# Map fields to the variables containing the level data
#TODO

[var2dim_mappings]
# Map dimension variables to the dimensions they correspond to.
# This is not needed if the dimension variable name is the same
# as the dimension name.
# The mapping from dimension variable to field is specified in 
# [horizontal_coordinate_mappings]
# We assume that there can be multiple mappings from dimension
# to dimension variable but only one mapping from dimension variable
# to dimension, so we map the variable to the dimension here.
# Horizontal coordinates _must_ be specified:
#    lat_var_name,lon_var_name = lat_dim_name,lon_dim_name
# Vertical coordinates _must_ be specified:
#    vertical_var_name = vertical_dim_name
# Specifying this is optional for Variables for which the dimension and
# the Variable corresponding to it have the same name.
#  e.g.: lat,lon = lat,lon
## G5NR native
PL = lev

##
# HWRF and NMM-B native:
#HLAT,HLON = south_north, west_east
#VLAT,VLON = south_north, west_east
PRESSURE = lev

[time_dim_config]
# Settings for the time dimension
time_dim_name = Time
